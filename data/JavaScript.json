{
  "title": "JavaScript",
  "content": "High-level programming language\n\n\n.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}@media print{body.ns-0 .mw-parser-output .hatnote{display:none!important}}Not to be confused with Java (programming language), Javanese script, or ECMAScript.\n\".js\" redirects here. For the Microsoft dialect used in Internet Explorer, see JScript.\nFor the uses of JavaScript on Wikipedia, see Wikipedia:WikiProject JavaScript.\n\n\n.mw-parser-output .hlist dl,.mw-parser-output .hlist ol,.mw-parser-output .hlist ul{margin:0;padding:0}.mw-parser-output .hlist dd,.mw-parser-output .hlist dt,.mw-parser-output .hlist li{margin:0;display:inline}.mw-parser-output .hlist.inline,.mw-parser-output .hlist.inline dl,.mw-parser-output .hlist.inline ol,.mw-parser-output .hlist.inline ul,.mw-parser-output .hlist dl dl,.mw-parser-output .hlist dl ol,.mw-parser-output .hlist dl ul,.mw-parser-output .hlist ol dl,.mw-parser-output .hlist ol ol,.mw-parser-output .hlist ol ul,.mw-parser-output .hlist ul dl,.mw-parser-output .hlist ul ol,.mw-parser-output .hlist ul ul{display:inline}.mw-parser-output .hlist .mw-empty-li{display:none}.mw-parser-output .hlist dt::after{content:\": \"}.mw-parser-output .hlist dd::after,.mw-parser-output .hlist li::after{content:\" · \";font-weight:bold}.mw-parser-output .hlist dd:last-child::after,.mw-parser-output .hlist dt:last-child::after,.mw-parser-output .hlist li:last-child::after{content:none}.mw-parser-output .hlist dd dd:first-child::before,.mw-parser-output .hlist dd dt:first-child::before,.mw-parser-output .hlist dd li:first-child::before,.mw-parser-output .hlist dt dd:first-child::before,.mw-parser-output .hlist dt dt:first-child::before,.mw-parser-output .hlist dt li:first-child::before,.mw-parser-output .hlist li dd:first-child::before,.mw-parser-output .hlist li dt:first-child::before,.mw-parser-output .hlist li li:first-child::before{content:\" (\";font-weight:normal}.mw-parser-output .hlist dd dd:last-child::after,.mw-parser-output .hlist dd dt:last-child::after,.mw-parser-output .hlist dd li:last-child::after,.mw-parser-output .hlist dt dd:last-child::after,.mw-parser-output .hlist dt dt:last-child::after,.mw-parser-output .hlist dt li:last-child::after,.mw-parser-output .hlist li dd:last-child::after,.mw-parser-output .hlist li dt:last-child::after,.mw-parser-output .hlist li li:last-child::after{content:\")\";font-weight:normal}.mw-parser-output .hlist ol{counter-reset:listitem}.mw-parser-output .hlist ol>li{counter-increment:listitem}.mw-parser-output .hlist ol>li::before{content:\" \"counter(listitem)\"\\a0 \"}.mw-parser-output .hlist dd ol>li:first-child::before,.mw-parser-output .hlist dt ol>li:first-child::before,.mw-parser-output .hlist li ol>li:first-child::before{content:\" (\"counter(listitem)\"\\a0 \"}.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}html.skin-theme-clientpref-night .mw-parser-output .infobox-full-data:not(.notheme)>div:not(.notheme)[style]{background:#1f1f23!important;color:#f8f9fa}@media(prefers-color-scheme:dark){html.skin-theme-clientpref-os .mw-parser-output .infobox-full-data:not(.notheme) div:not(.notheme){background:#1f1f23!important;color:#f8f9fa}}@media(min-width:640px){body.skin--responsive .mw-parser-output .infobox-table{display:table!important}body.skin--responsive .mw-parser-output .infobox-table>caption{display:table-caption!important}body.skin--responsive .mw-parser-output .infobox-table>tbody{display:table-row-group}body.skin--responsive .mw-parser-output .infobox-table tr{display:table-row!important}body.skin--responsive .mw-parser-output .infobox-table th,body.skin--responsive .mw-parser-output .infobox-table td{padding-left:inherit;padding-right:inherit}}JavaScriptScreenshot of JavaScript source codeParadigmMulti-paradigm: event-driven, functional, imperative, procedural, object-orientedDesigned byBrendan Eich of Netscape initially; others have also contributed to the ECMAScript standardFirst appearedDecember 4, 1995; 28 years ago (1995-12-04)[1]Stable releaseECMAScript 2023[2] \n   / June 2023; 13 months ago (June 2023)Preview releaseECMAScript 2025[3] \n   / 27 March 2024; 4 months ago (27 March 2024)\nTyping disciplineDynamic, weak, duckFilename extensions\n.js\n.cjs\n.mjs[4]\nWebsiteecma-international.org/publications-and-standards/standards/ecma-262/Major implementationsV8, JavaScriptCore, SpiderMonkey, ChakraInfluenced byJava,[5][6] Scheme,[6] Self,[7] AWK,[8] HyperTalk[9]InfluencedActionScript, ArkTS, AssemblyScript, CoffeeScript, Dart, Haxe, JS++, Opa, TypeScript\n JavaScript at Wikibooks\n\nJavaScript (/ˈdʒɑːvəskrɪpt/), often abbreviated as JS, is a programming language and core technology of the Web, alongside HTML and CSS. 99% of websites use JavaScript on the client side for webpage behavior.[10]\nWeb browsers have a dedicated JavaScript engine that executes the client code. These engines are also utilized in some servers and a variety of apps. The most popular runtime system for non-browser usage is Node.js.\nJavaScript is a high-level, often just-in-time compiled language that conforms to the ECMAScript standard.[11] It has dynamic typing, prototype-based object-orientation, and first-class functions. It is multi-paradigm, supporting event-driven, functional, and imperative programming styles. It has application programming interfaces (APIs) for working with text, dates, regular expressions, standard data structures, and the Document Object Model (DOM).\nThe ECMAScript standard does not include any input/output (I/O), such as networking, storage, or graphics facilities. In practice, the web browser or other runtime system provides JavaScript APIs for I/O.\nAlthough Java and JavaScript are similar in name, syntax, and respective standard libraries, the two languages are distinct and differ greatly in design.\n\n\nHistory\nCreation at Netscape\nThe first popular web browser with a graphical user interface, Mosaic, was released in 1993. Accessible to non-technical people, it played a prominent role in the rapid growth of the early World Wide Web.[12] The lead developers of Mosaic then founded the Netscape corporation, which released a more polished browser, Netscape Navigator, in 1994. This quickly became the most-used.[13]\nDuring these formative years of the Web, web pages could only be static, lacking the capability for dynamic behavior after the page was loaded in the browser. There was a desire in the flourishing web development scene to remove this limitation, so in 1995, Netscape decided to add a programming language to Navigator. They pursued two routes to achieve this: collaborating with Sun Microsystems to embed the Java language, while also hiring Brendan Eich to embed the Scheme language.[6]\nThe goal was a \"language for the masses\",[14] \"to help nonprogrammers create dynamic, interactive Web sites\".[15] Netscape management soon decided that the best option was for Eich to devise a new language, with syntax similar to Java and less like Scheme or other extant scripting languages.[5][6] Although the new language and its interpreter implementation were called LiveScript when first shipped as part of a Navigator beta in September 1995, the name was changed to JavaScript for the official release in December.[6][1][16]\nThe choice of the JavaScript name has caused confusion, implying that it is directly related to Java. At the time, the dot-com boom had begun and Java was a popular new language, so Eich considered the JavaScript name a marketing ploy by Netscape.[14]\n\nAdoption by Microsoft\nMicrosoft debuted Internet Explorer in 1995, leading to a browser war with Netscape. On the JavaScript front, Microsoft created its own interpreter called JScript.[17]\nMicrosoft first released JScript in 1996, alongside initial support for CSS and extensions to HTML. Each of these implementations was noticeably different from their counterparts in Netscape Navigator.[18][19] These differences made it difficult for developers to make their websites work well in both browsers, leading to widespread use of \"best viewed in Netscape\" and \"best viewed in Internet Explorer\" logos for several years.[18][20]\n\nThe rise of JScript\n.mw-parser-output .quotebox{background-color:#F9F9F9;border:1px solid #aaa;box-sizing:border-box;padding:10px;font-size:88%;max-width:100%}.mw-parser-output .quotebox.floatleft{margin:.5em 1.4em .8em 0}.mw-parser-output .quotebox.floatright{margin:.5em 0 .8em 1.4em}.mw-parser-output .quotebox.centered{overflow:hidden;position:relative;margin:.5em auto .8em auto}.mw-parser-output .quotebox.floatleft span,.mw-parser-output .quotebox.floatright span{font-style:inherit}.mw-parser-output .quotebox>blockquote{margin:0;padding:0;border-left:0;font-family:inherit;font-size:inherit}.mw-parser-output .quotebox-title{text-align:center;font-size:110%;font-weight:bold}.mw-parser-output .quotebox-quote>:first-child{margin-top:0}.mw-parser-output .quotebox-quote:last-child>:last-child{margin-bottom:0}.mw-parser-output .quotebox-quote.quoted:before{font-family:\"Times New Roman\",serif;font-weight:bold;font-size:large;color:gray;content:\" “ \";vertical-align:-45%;line-height:0}.mw-parser-output .quotebox-quote.quoted:after{font-family:\"Times New Roman\",serif;font-weight:bold;font-size:large;color:gray;content:\" ” \";line-height:0}.mw-parser-output .quotebox .left-aligned{text-align:left}.mw-parser-output .quotebox .right-aligned{text-align:right}.mw-parser-output .quotebox .center-aligned{text-align:center}.mw-parser-output .quotebox .quote-title,.mw-parser-output .quotebox .quotebox-quote{display:block}.mw-parser-output .quotebox cite{display:block;font-style:normal}@media screen and (max-width:640px){.mw-parser-output .quotebox{width:100%!important;margin:0 0 .8em!important;float:none!important}}\n\nBrendan Eich later said of this period: \"It's still kind of a sidekick language. It's considered slow or annoying. People do pop-ups or those scrolling messages in the old status bar at the bottom of your old browser.\"[14]\n\n\n\nIn November 1996, Netscape submitted JavaScript to Ecma International, as the starting point for a standard specification that all browser vendors could conform to. This led to the official release of the first ECMAScript language specification in June 1997.\nThe standards process continued for a few years, with the release of ECMAScript 2 in June 1998 and ECMAScript 3 in December 1999. Work on ECMAScript 4 began in 2000.[17]\nHowever, the effort to fully standardize the language was undermined by Microsoft gaining an increasingly dominant position in the browser market. By the early 2000s, Internet Explorer's market share reached 95%.[21] This meant that JScript became the de facto standard for client-side scripting on the Web.\nMicrosoft initially participated in the standards process and implemented some proposals in its JScript language, but eventually it stopped collaborating on ECMA work. Thus ECMAScript 4 was mothballed.\n\nGrowth and standardization\nDuring the period of Internet Explorer dominance in the early 2000s, client-side scripting was stagnant. This started to change in 2004, when the successor of Netscape, Mozilla, released the Firefox browser. Firefox was well received by many, taking significant market share from Internet Explorer.[22]\nIn 2005, Mozilla joined ECMA International, and work started on the ECMAScript for XML (E4X) standard. This led to Mozilla working jointly with Macromedia (later acquired by Adobe Systems), who were implementing E4X in their ActionScript 3 language, which was based on an ECMAScript 4 draft. The goal became standardizing ActionScript 3 as the new ECMAScript 4. To this end, Adobe Systems released the Tamarin implementation as an open source project. However, Tamarin and ActionScript 3 were too different from established client-side scripting, and without cooperation from Microsoft, ECMAScript 4 never reached fruition.\nMeanwhile, very important developments were occurring in open-source communities not affiliated with ECMA work. In 2005, Jesse James Garrett released a white paper in which he coined the term Ajax and described a set of technologies, of which JavaScript was the backbone, to create web applications where data can be loaded in the background, avoiding the need for full page reloads. This sparked a renaissance period of JavaScript, spearheaded by open-source libraries and the communities that formed around them. Many new libraries were created, including jQuery, Prototype, Dojo Toolkit, and MooTools.\nGoogle debuted its Chrome browser in 2008, with the V8 JavaScript engine that was faster than its competition.[23][24] The key innovation was just-in-time compilation (JIT),[25] so other browser vendors needed to overhaul their engines for JIT.[26]\nIn July 2008, these disparate parties came together for a conference in Oslo. This led to the eventual agreement in early 2009 to combine all relevant work and drive the language forward. The result was the ECMAScript 5 standard, released in December 2009.\n\nReaching maturity\nAmbitious work on the language continued for several years, culminating in an extensive collection of additions and refinements being formalized with the publication of ECMAScript 6 in 2015.[27]\nThe creation of Node.js in 2009 by Ryan Dahl sparked a significant increase in the usage of JavaScript outside of web browsers. Node combines the V8 engine, an event loop, and I/O APIs, thereby providing a stand-alone JavaScript runtime system.[28][29] As of 2018, Node had been used by millions of developers,[30] and npm had the most modules of any package manager in the world.[31]\nThe ECMAScript draft specification is currently maintained openly on GitHub,[32] and editions are produced via regular annual snapshots.[32] Potential revisions to the language are vetted through a comprehensive proposal process.[33][34] Now, instead of edition numbers, developers check the status of upcoming features individually.[32]\nThe current JavaScript ecosystem has many libraries and frameworks, established programming practices, and substantial usage of JavaScript outside of web browsers. Plus, with the rise of single-page applications and other JavaScript-heavy websites, several transpilers have been created to aid the development process.[35]\n\nTrademark\n\"JavaScript\" is a trademark of Oracle Corporation in the United States.[36][37] The trademark was originally issued to Sun Microsystems on 6 May 1997, and was transferred to Oracle when they acquired Sun in 2009.[38]\n\nWebsite client-side usage\nJavaScript is the dominant client-side scripting language of the Web, with 99% of all websites using it for this purpose.[10] Scripts are embedded in or included from HTML documents and interact with the DOM. \nAll major web browsers have a built-in JavaScript engine that executes the code on the user's device.\n\nExamples of scripted behavior\nLoading new web page content without reloading the page, via Ajax or a WebSocket. For example, users of social media can send and receive messages without leaving the current page.\nWeb page animations, such as fading objects in and out, resizing, and moving them.\nPlaying browser games.\nControlling the playback of streaming media.\nGenerating pop-up ads or alert boxes.\nValidating input values of a web form before the data is sent to a web server.\nLogging data about the user's behavior then sending it to a server. The website owner can use this data for analytics, ad tracking, and personalization.\nRedirecting a user to another page.\nStoring and retrieving data on the user's device, via the storage or IndexedDB standards.\nLibraries and frameworks\nOver 80% of websites use a third-party JavaScript library or web framework as part of their client-side scripting.[39]\njQuery is by far the most-used.[39] Other notable ones include Angular, Bootstrap, Lodash, Modernizr, React, Underscore, and Vue.[39] Multiple options can be used in conjunction, such as jQuery and Bootstrap.[40]\nHowever, the term \"Vanilla JS\" was coined for websites not using any libraries or frameworks at all, instead relying entirely on standard JavaScript functionality.[41]\n\nOther usage\nThe use of JavaScript has expanded beyond its web browser roots. JavaScript engines are now embedded in a variety of other software systems, both for server-side website deployments and non-browser applications.\nInitial attempts at promoting server-side JavaScript usage were Netscape Enterprise Server and Microsoft's Internet Information Services,[42][43] but they were small niches.[44] Server-side usage eventually started to grow in the late 2000s, with the creation of Node.js and other approaches.[44]\nElectron, Cordova, React Native, and other application frameworks have been used to create many applications with behavior implemented in JavaScript. Other non-browser applications include Adobe Acrobat support for scripting PDF documents[45] and GNOME Shell extensions written in JavaScript.[46]\nJavaScript has recently begun to appear in some embedded systems, usually by leveraging Node.js.[47][48][49]\n\nExecution\nJavaScript engine\n.mw-parser-output .excerpt-hat .mw-editsection-like{font-style:normal}This section is an excerpt from JavaScript engine.[edit]\nA JavaScript engine is a software component that executes JavaScript code. The first JavaScript engines were mere interpreters, but all relevant modern engines use just-in-time compilation for improved performance.[50]\nJavaScript engines are typically developed by web browser vendors, and every major browser has one. In a browser, the JavaScript engine runs in concert with the rendering engine via the Document Object Model and Web IDL bindings.[51] However, the use of JavaScript engines is not limited to browsers; for example, the V8 engine is a core component of the Node.js runtime system.[52]\n\nSince ECMAScript is the standardized specification of JavaScript, ECMAScript engine is another name for these implementations. With the advent of WebAssembly, some engines can also execute this code in the same sandbox as regular JavaScript code.[53][52]\nRuntime system\nA JavaScript engine must be embedded within a runtime system (such as a web browser or a standalone system) to enable scripts to interact with the broader environment. The runtime system includes the necessary APIs for input/output operations, such as networking, storage, and graphics, and provides the ability to import scripts.\nJavaScript is a single-threaded language. The runtime processes messages from a queue one at a time, and it calls a function associated with each new message, creating a call stack frame with the function's arguments and local variables. The call stack shrinks and grows based on the function's needs. When the call stack is empty upon function completion, JavaScript proceeds to the next message in the queue. This is called the event loop, described as \"run to completion\" because each message is fully processed before the next message is considered. However, the language's concurrency model describes the event loop as non-blocking: program I/O is performed using events and callback functions. This means, for example, that JavaScript can process a mouse click while waiting for a database query to return information.[54]\nThe notable standalone runtimes are Node.js, Deno, and Bun.\n\nFeatures\nThe following features are common to all conforming ECMAScript implementations unless explicitly specified otherwise.\n\nImperative and structured\nMain article: Structured programming\nJavaScript supports much of the structured programming syntax from C (e.g., if statements, while loops, switch statements, do while loops, etc.). One partial exception is scoping: originally JavaScript only had function scoping with var; block scoping was added in ECMAScript 2015 with the keywords let and const. Like C, JavaScript makes a distinction between expressions and statements. One syntactic difference from C is automatic semicolon insertion, which allow semicolons (which terminate statements) to be omitted.[55]\n\nWeakly typed\nMain article: Weakly typed\nJavaScript is weakly typed, which means certain types are implicitly cast depending on the operation used.[56]\n\nThe binary + operator casts both operands to a string unless both operands are numbers. This is because the addition operator doubles as a concatenation operator\nThe binary - operator always casts both operands to a number\nBoth unary operators (+, -) always cast the operand to a number\nValues are cast to strings like the following:[56]\n\nStrings are left as-is\nNumbers are converted to their string representation\nArrays have their elements cast to strings after which they are joined by commas (,)\nOther objects are converted to the string [object Object] where Object is the name of the constructor of the object\nValues are cast to numbers by casting to strings and then casting the strings to numbers. These processes can be modified by defining toString and valueOf functions on the prototype for string and number casting respectively.\nJavaScript has received criticism for the way it implements these conversions as the complexity of the rules can be mistaken for inconsistency.[57][56] For example, when adding a number to a string, the number will be cast to a string before performing concatenation, but when subtracting a number from a string, the string is cast to a number before performing subtraction.\n\n\nJavaScript type conversions\n\n\nleft operand\n\noperator\n\nright operand\n\nresult\n\n\n[] (empty array)\n\n+\n\n[] (empty array)\n\n\"\" (empty string)\n\n\n[] (empty array)\n\n+\n\n{} (empty object)\n\n\"[object Object]\" (string)\n\n\nfalse (boolean)\n\n+\n\n[] (empty array)\n\n\"false\" (string)\n\n\n\"123\"(string)\n\n+\n\n1 (number)\n\n\"1231\" (string)\n\n\n\"123\" (string)\n\n-\n\n1 (number)\n\n122 (number)\n\n\n\"123\" (string)\n\n-\n\n\"abc\" (string)\n\nNaN (number)\n\nOften also mentioned is {} + [] resulting in 0 (number). This is misleading: the {} is interpreted as an empty code block instead of an empty object, and the empty array is cast to a number by the remaining unary + operator. If the expression is wrapped in parentheses - ({} + []) - the curly brackets are interpreted as an empty object and the result of the expression is \"[object Object]\" as expected.[56]\n\nDynamic\nMain article: Dynamic Programming\nTyping\nMain article: Dynamic typing\nJavaScript is dynamically typed like most other scripting languages. A type is associated with a value rather than an expression. For example, a variable initially bound to a number may be reassigned to a string.[58] JavaScript supports various ways to test the type of objects, including duck typing.[59]\n\nRun-time evaluation\nMain article: eval\nJavaScript includes an eval function that can execute statements provided as strings at run-time.\n\nObject-orientation (prototype-based)\nPrototypal inheritance in JavaScript is described by Douglas Crockford as:\n\n.mw-parser-output .templatequote{overflow:hidden;margin:1em 0;padding:0 32px}.mw-parser-output .templatequote .templatequotecite{line-height:1.5em;text-align:left;padding-left:1.6em;margin-top:0}You make prototype objects, and then ... make new instances. Objects are mutable in JavaScript, so we can augment the new instances, giving them new fields and methods. These can then act as prototypes for even newer objects. We don't need classes to make lots of similar objects... Objects inherit from objects. What could be more object oriented than that?[60]\n\nIn JavaScript, an object is an associative array, augmented with a prototype (see below); each key provides the name for an object property, and there are two syntactical ways to specify such a name: dot notation (obj.x = 10) and bracket notation (obj['x'] = 10). A property may be added, rebound, or deleted at run-time. Most properties of an object (and any property that belongs to an object's prototype inheritance chain) can be enumerated using a for...in loop.\n\nPrototypes\nMain article: Prototype-based programming\nJavaScript uses prototypes where many other object-oriented languages use classes for inheritance.[61] It is possible to simulate many class-based features with prototypes in JavaScript.[62]\n\nFunctions as object constructors\nFunctions double as object constructors, along with their typical role. Prefixing a function call with new will create an instance of a prototype, inheriting properties and methods from the constructor (including properties from the Object prototype).[63] ECMAScript 5 offers the Object.create method, allowing explicit creation of an instance without automatically inheriting from the Object prototype (older environments can assign the prototype to null).[64] The constructor's prototype property determines the object used for the new object's internal prototype. New methods can be added by modifying the prototype of the function used as a constructor. JavaScript's built-in constructors, such as Array or Object, also have prototypes that can be modified. While it is possible to modify the Object prototype, it is generally considered bad practice because most objects in JavaScript will inherit methods and properties from the Object prototype, and they may not expect the prototype to be modified.[65]\n\nFunctions as methods\nMain article: Method (computer science)\nUnlike in many object-oriented languages, in JavaScript there is no distinction between a function definition and a method definition. Rather, the distinction occurs during function calling. When a function is called as a method of an object, the function's local this keyword is bound to that object for that invocation.\n\nFunctional\nMain article: Functional programming\nJavaScript functions are first-class; a function is considered to be an object.[66] As such, a function may have properties and methods, such as .call() and .bind().[67] \n\nLexical closure\nMain article: Closure (computer programming)\nA nested function is a function defined within another function. It is created each time the outer function is invoked. \nIn addition, each nested function forms a lexical closure: the lexical scope of the outer function (including any constant, local variable, or argument value) becomes part of the internal state of each inner function object, even after execution of the outer function concludes.[68] \n\nAnonymous function\nMain article: Anonymous function\nJavaScript also supports anonymous functions.\n\nDelegative\nMain article: Delegation (object-oriented programming)\nJavaScript supports implicit and explicit delegation.\n\nFunctions as roles (Traits and Mixins)\nMain articles: Role-oriented programming, Traits (computer science), and Mixin\nJavaScript natively supports various function-based implementations of Role[69] patterns like Traits[70][71] and Mixins.[72] Such a function defines additional behavior by at least one method bound to the this keyword within its function body. A Role then has to be delegated explicitly via call or apply to objects that need to feature additional behavior that is not shared via the prototype chain.\n\nObject composition and inheritance\nWhereas explicit function-based delegation does cover composition in JavaScript, implicit delegation already happens every time the prototype chain is walked in order to, e.g., find a method that might be related to but is not directly owned by an object. Once the method is found it gets called within this object's context. Thus inheritance in JavaScript is covered by a delegation automatism that is bound to the prototype property of constructor functions.\n\nMiscellaneous\nZero-based numbering\nJavaScript is a zero-index language.\n\nVariadic functions\nMain article: Variadic function\nAn indefinite number of parameters can be passed to a function. The function can access them through formal parameters and also through the local arguments object. Variadic functions can also be created by using the bind method.\n\nArray and object literals\nMain articles: Associative arrays and Object literal\nLike in many scripting languages, arrays and objects (associative arrays in other languages) can each be created with a succinct shortcut syntax. In fact, these literals form the basis of the JSON data format.\n\nRegular expressions\nMain article: Regular expression\nIn a manner similar to Perl, JavaScript also supports regular expressions, which provide a concise and powerful syntax for text manipulation that is more sophisticated than the built-in string functions.[73]\n\nPromises and Async/await\nJavaScript supports promises and Async/await for handling asynchronous operations.[citation needed] \n\nPromises\nMain article: Futures and promises\nA built-in Promise object provides functionality for handling promises and associating handlers with an asynchronous action's eventual result. Recently, the JavaScript specification introduced combinator methods, which allow developers to combine multiple JavaScript promises and do operations based on different scenarios. The methods introduced are: Promise.race, Promise.all, Promise.allSettled and Promise.any.\n\nAsync/await\nMain article: Async/await\nAsync/await allows an asynchronous, non-blocking function to be structured in a way similar to an ordinary synchronous function. Asynchronous, non-blocking code can be written, with minimal overhead, structured similarly to traditional synchronous, blocking code.\n\nVendor-specific extensions\nHistorically, some JavaScript engines supported these non-standard features:\n\nconditional catch clauses (like Java)\narray comprehensions and generator expressions (like Python)\nconcise function expressions (function(args) expr; this experimental syntax predated arrow functions)\nECMAScript for XML (E4X), an extension that adds native XML support to ECMAScript (unsupported in Firefox since version 21[74])\nSyntax\nMain article: JavaScript syntax\nSimple examples\nVariables in JavaScript can be defined using either the var,[75] let[76] or const[77] keywords.  Variables defined without keywords will be defined at the global scope.\n\n// Declares a function-scoped variable named `x`, and implicitly assigns the\n// special value `undefined` to it. Variables without value are automatically\n// set to undefined.\n// var is generally considered bad practice and let and const are usually preferred.\nvar x;\n\n// Variables can be manually set to `undefined` like so\nlet x2 = undefined;\n\n// Declares a block-scoped variable named `y`, and implicitly sets it to\n// `undefined`. The `let` keyword was introduced in ECMAScript 2015.\nlet y;\n\n// Declares a block-scoped, un-reassignable variable named `z`, and sets it to\n// a string literal. The `const` keyword was also introduced in ECMAScript 2015,\n// and must be explicitly assigned to.\n\n// The keyword `const` means constant, hence the variable cannot be reassigned\n// as the value is `constant`.\nconst z = \"this value cannot be reassigned!\";\n\n// Declares a global-scoped variable and assigns 3.  This is generally considered\n// bad practice, and will not work if strict mode is on.\nt = 3;\n\n// Declares a variable named `myNumber`, and assigns a number literal (the value\n// `2`) to it.\nlet myNumber = 2;\n\n// Reassigns `myNumber`, setting it to a string literal (the value `\"foo\"`).\n// JavaScript is a dynamically-typed language, so this is legal.\nmyNumber = \"foo\";\n\nNote the comments in the examples above, all of which were preceded with two forward slashes.\nThere is no built-in Input/output functionality in JavaScript, instead it is provided by the run-time environment. The ECMAScript specification in edition 5.1 mentions that \"there are no provisions in this specification for input of external data or output of computed results\".[78]\nHowever, most runtime environments have a console object that can be used to print output.[79] Here is a minimalist \"Hello, World!\" program in JavaScript in a runtime environment with a console object:\n\nconsole.log(\"Hello, World!\");\n\nIn HTML documents, a program like this is required for an output:\n\n// Text nodes can be made using the \"write\" method.\n// This is frowned upon, as it can overwrite the document if the document is fully loaded.\ndocument.write('foo');\n\n// Elements can be made too. First, they have to be created in the DOM.\nconst myElem = document.createElement('span');\n\n// Attributes like classes and the id can be set as well\nmyElem.classList.add('foo');\nmyElem.id = 'bar';\n\n// After setting this, the tag will look like this: `<span class=\"foo\" id=\"bar\" data-attr=\"baz\"></span>`\nmyElem.setAttribute('data-attr', 'baz'); // Which could also be written as `myElem.dataset.attr = 'baz'`\n\n// Finally append it as a child element to the <body> in the HTML\ndocument.body.appendChild(myElem);\n\n// Elements can be imperatively grabbed with querySelector for one element, or querySelectorAll for multiple elements that can be looped with forEach\ndocument.querySelector('.class'); // Selects the first element with the \"class\" class\ndocument.querySelector('#id'); // Selects the first element with an `id` of \"id\"\ndocument.querySelector('[data-other]'); // Selects the first element with the \"data-other\" attribute\ndocument.querySelectorAll('.multiple'); // Returns an Array-like NodeList of all elements with the \"multiple\" class\nA simple recursive function to calculate the factorial of a natural number:\nfunction factorial(n) {\n    // Checking the argument for legitimacy. Factorial is defined for positive integers.\n    if (isNaN(n)) {\n        console.error(\"Non-numerical argument not allowed.\");\n        return NaN; // The special value: Not a Number\n    }\n    if (n === 0)\n        return 1; // 0! = 1\n    if (n < 0)\n        return undefined; // Factorial of negative numbers is not defined.\n    if (n % 1) {\n        console.warn(`${n} will be rounded to the closest integer. For non-integers consider using gamma function instead.`);\n        n = Math.round(n);\n    }\n    // The above checks need not be repeated in the recursion, hence defining the actual recursive part separately below.\n\n    // The following line is a function expression to recursively compute the factorial. It uses the arrow syntax introduced in ES6.\n    const recursivelyCompute = a => a > 1 ? a * recursivelyCompute(a - 1) : 1; // Note the use of the ternary operator `?`.\n    return recursivelyCompute(n);\n}\n\nfactorial(3); // Returns 6\n\nAn anonymous function (or lambda):\n\nconst counter = function() {\n    let count = 0;\n    return function() {\n        return ++count;\n    }\n};\n\nconst x = counter();\nx(); // Returns 1\nx(); // Returns 2\nx(); // Returns 3\n\nThis example shows that, in JavaScript, function closures capture their non-local variables by reference.\nArrow functions were first introduced in 6th Edition - ECMAScript 2015. They shorten the syntax for writing functions in JavaScript. Arrow functions are anonymous, so a variable is needed to refer to them in order to invoke them after their creation, unless surrounded by parenthesis and executed immediately.\nExample of arrow function:\n\n// Arrow functions let us omit the `function` keyword.\n// Here `long_example` points to an anonymous function value.\nconst long_example = (input1, input2) => {\n    console.log(\"Hello, World!\");\n    const output = input1 + input2;\n\n    return output;\n};\n\n// If there are no braces, the arrow function simply returns the expression\n// So here it's (input1 + input2)\nconst short_example = (input1, input2) => input1 + input2;\n\nlong_example(2, 3); // Prints \"Hello, World!\" and returns 5\nshort_example(2, 5);  // Returns 7\n\n// If an arrow function has only one parameter, the parentheses can be removed.\nconst no_parentheses = input => input + 2;\n\nno_parentheses(3); // Returns 5\n\n// An arrow function, like other function definitions, can be executed in the same statement as they are created.\n// This is useful when writing libraries to avoid filling the global scope, and for closures.\nlet three = ((a, b) => a + b) (1, 2);\n\nconst generate_multiplier_function = a => (b => isNaN(b) || !b ? a : a*=b);\nconst five_multiples = generate_multiplier_function(5); // The supplied argument \"seeds\" the expression and is retained by a.\nfive_multiples(1); // Returns 5\nfive_multiples(3); // Returns 15\nfive_multiples(4); // Returns 60\n\nIn JavaScript, objects can be created as instances of a class.\nObject class example:\n\nclass Ball {\n\n   constructor(radius) {\n      this.radius = radius;\n      this.area = Math.PI * ( radius ** 2 );\n   }\n\n   // Classes (and thus objects) can contain functions known as methods\n   show() {\n      console.log(this.radius);\n   }\n};\n\nconst myBall = new Ball(5); // Creates a new instance of the ball object with radius 5\nmyBall.radius++; // Object properties can usually be modified from the outside\nmyBall.show();   // Using the inherited \"show\" function logs \"6\"\n\nIn JavaScript, objects can be instantiated directly from a function.\nObject functional example:\n\nfunction Ball(radius) {\n\n   const area = Math.PI * ( radius ** 2 );\n   const obj = { radius, area };\n\n   // Objects are mutable, and functions can be added as properties.\n   obj.show = () => console.log(obj.radius);\n   return obj;\n};\n\nconst myBall = Ball(5); // Creates a new ball object with radius 5. No \"new\" keyword needed.\nmyBall.radius++; // The instance property can be modified.\nmyBall.show();   // Using the \"show\" function logs \"6\" - the new instance value.\n\nVariadic function demonstration (arguments is a special variable):[80]\n\nfunction sum() {\n    let x = 0;\n\n    for (let i = 0; i < arguments.length; ++i)\n        x += arguments[i];\n\n    return x;\n}\n\nsum(1, 2); // Returns 3\nsum(1, 2, 3); // Returns 6\n\n// As of ES6, using the rest operator.\nfunction sum(...args) {\n    return args.reduce((a, b) => a + b);\n}\n\nsum(1, 2); // Returns 3\nsum(1, 2, 3); // Returns 6\n\nImmediately-invoked function expressions are often used to create closures. Closures allow gathering properties and methods in a namespace and making some of them private:\n\nlet counter = (function() {\n    let i = 0; // Private property\n\n    return {   // Public methods\n        get: function() {\n            alert(i);\n        },\n        set: function(value) {\n            i = value;\n        },\n        increment: function() {\n            alert(++i);\n        }\n    };\n})(); // Module\n\ncounter.get(); // Returns 0\ncounter.set(6);\ncounter.increment(); // Returns 7\ncounter.increment(); // Returns 8\n\nGenerator objects (in the form of generator functions) provide a function which can be called, exited, and re-entered while maintaining internal context (statefulness).[81]function* rawCounter() {\n    yield 1;\n    yield 2;\n}\n\nfunction* dynamicCounter() {\n    let count = 0;\n    while (true) {\n        // It is not recommended to utilize while true loops in most cases.\n        yield ++count;\n    }\n}\n\n// Instances\nconst counter1 = rawCounter();\nconst counter2 = dynamicCounter();\n\n// Implementation\ncounter1.next(); // {value: 1, done: false}\ncounter1.next(); // {value: 2, done: false}\ncounter1.next(); // {value: undefined, done: true}\n\ncounter2.next(); // {value: 1, done: false}\ncounter2.next(); // {value: 2, done: false}\ncounter2.next(); // {value: 3, done: false}\n// ...infinitely\n\nJavaScript can export and import from modules:[82]\nExport example:\n\n/* mymodule.js */\n// This function remains private, as it is not exported\nlet sum = (a, b) => {\n    return a + b;\n}\n\n// Export variables\nexport let name = 'Alice';\nexport let age = 23;\n\n// Export named functions\nexport function add(num1, num2) {\n    return num1 + num2;\n}\n\n// Export class\nexport class Multiplication {\n    constructor(num1, num2) {\n        this.num1 = num1;\n        this.num2 = num2;\n    }\n\n    add() {\n        return sum(this.num1, this.num2);\n    }\n}\n\nImport example:\n\n// Import one property\nimport { add } from './mymodule.js';\nconsole.log(add(1, 2));\n//> 3\n\n// Import multiple properties\nimport { name, age } from './mymodule.js';\nconsole.log(name, age);\n//> \"Alice\", 23\n\n// Import all properties from a module\nimport * from './module.js'\nconsole.log(name, age);\n//> \"Alice\", 23\nconsole.log(add(1,2));\n//> 3\n\nMore advanced example\nThis sample code displays various JavaScript features.\n\n/* Finds the lowest common multiple (LCM) of two numbers */\nfunction LCMCalculator(x, y) { // constructor function\n    if (isNaN(x*y)) throw new TypeError(\"Non-numeric arguments not allowed.\");\n    const checkInt = function(x) { // inner function\n        if (x % 1 !== 0)\n            throw new TypeError(x + \"is not an integer\");\n\n        return x;\n    };\n\n    this.a = checkInt(x)\n    //   semicolons   ^^^^  are optional, a newline is enough\n    this.b = checkInt(y);\n}\n// The prototype of object instances created by a constructor is\n// that constructor's \"prototype\" property.\nLCMCalculator.prototype = { // object literal\n    constructor: LCMCalculator, // when reassigning a prototype, set the constructor property appropriately\n    gcd: function() { // method that calculates the greatest common divisor\n        // Euclidean algorithm:\n        let a = Math.abs(this.a), b = Math.abs(this.b), t;\n\n        if (a < b) {\n            // swap variables\n            // t = b; b = a; a = t;\n            [a, b] = [b, a]; // swap using destructuring assignment (ES6)\n        }\n\n        while (b !== 0) {\n            t = b;\n            b = a % b;\n            a = t;\n        }\n\n        // Only need to calculate GCD once, so \"redefine\" this method.\n        // (Actually not redefinition—it's defined on the instance itself,\n        // so that this.gcd refers to this \"redefinition\" instead of LCMCalculator.prototype.gcd.\n        // Note that this leads to a wrong result if the LCMCalculator object members \"a\" or \"b\" are altered afterwards.)\n        // Also, 'gcd' === \"gcd\", this['gcd'] === this.gcd\n        this['gcd'] = function() {\n            return a;\n        };\n\n        return a;\n    },\n\n    // Object property names can be specified by strings delimited by double (\") or single (') quotes.\n    \"lcm\": function() {\n        // Variable names do not collide with object properties, e.g., |lcm| is not |this.lcm|.\n        // not using |this.a*this.b| to avoid FP precision issues\n        let lcm = this.a / this.gcd() * this.b;\n\n        // Only need to calculate lcm once, so \"redefine\" this method.\n        this.lcm = function() {\n            return lcm;\n        };\n\n        return lcm;\n    },\n\n    // Methods can also be declared using ES6 syntax\n    toString() {\n        // Using both ES6 template literals and the (+) operator to concatenate values\n        return `LCMCalculator: a = ${this.a}, b = ` + this.b;\n    }\n};\n\n// Define generic output function; this implementation only works for Web browsers\nfunction output(x) {\n    document.body.appendChild(document.createTextNode(x));\n    document.body.appendChild(document.createElement('br'));\n}\n\n// Note: Array's map() and forEach() are defined in JavaScript 1.6.\n// They are used here to demonstrate JavaScript's inherent functional nature.\n[\n    [25, 55],\n    [21, 56],\n    [22, 58],\n    [28, 56]\n].map(function(pair) { // array literal + mapping function\n    return new LCMCalculator(pair[0], pair[1]);\n}).sort((a, b) => a.lcm() - b.lcm()) // sort with this comparative function; => is a shorthand form of a function, called \"arrow function\"\n    .forEach(printResult);\n\nfunction printResult(obj) {\n    output(obj + \", gcd = \" + obj.gcd() + \", lcm = \" + obj.lcm());\n}\n\nThe following output should be displayed in the browser window.\n\nLCMCalculator: a = 28, b = 56, gcd = 28, lcm = 56\nLCMCalculator: a = 21, b = 56, gcd = 7, lcm = 168\nLCMCalculator: a = 25, b = 55, gcd = 5, lcm = 275\nLCMCalculator: a = 22, b = 58, gcd = 2, lcm = 638\n\nSecurity\nSee also: Browser security\nJavaScript and the DOM provide the potential for malicious authors to deliver scripts to run on a client computer via the Web. Browser authors minimize this risk using two restrictions. First, scripts run in a sandbox in which they can only perform Web-related actions, not general-purpose programming tasks like creating files. Second, scripts are constrained by the same-origin policy: scripts from one website do not have access to information such as usernames, passwords, or cookies sent to another site. Most JavaScript-related security bugs are breaches of either the same origin policy or the sandbox.\nThere are subsets of general JavaScript—ADsafe, Secure ECMAScript (SES)—that provide greater levels of security, especially on code created by third parties (such as advertisements).[83][84] Closure Toolkit is another project for safe embedding and isolation of third-party JavaScript and HTML.[85]\nContent Security Policy is the main intended method of ensuring that only trusted code is executed on a Web page.\n\nCross-site scripting\nMain article: Cross-site scripting\nA common JavaScript-related security problem is cross-site scripting (XSS), a violation of the same-origin policy. XSS vulnerabilities occur when an attacker can cause a target Website, such as an online banking website, to include a malicious script in the webpage presented to a victim. The script in this example can then access the banking application with the privileges of the victim, potentially disclosing secret information or transferring money without the victim's authorization. One important solution to XSS vulnerabilities is HTML sanitization.\nSome browsers include partial protection against reflected XSS attacks, in which the attacker provides a URL including malicious script. However, even users of those browsers are vulnerable to other XSS attacks, such as those where the malicious code is stored in a database. Only correct design of Web applications on the server-side can fully prevent XSS.\nXSS vulnerabilities can also occur because of implementation mistakes by browser authors.[86]\n\nCross-site request forgery\nMain article: Cross-site request forgery\nAnother cross-site vulnerability is cross-site request forgery (CSRF). In CSRF, code on an attacker's site tricks the victim's browser into taking actions the user did not intend at a target site (like transferring money at a bank). When target sites rely solely on cookies for request authentication, requests originating from code on the attacker's site can carry the same valid login credentials of the initiating user. In general, the solution to CSRF is to require an authentication value in a hidden form field, and not only in the cookies, to authenticate any request that might have lasting effects. Checking the HTTP Referrer header can also help.\n\"JavaScript hijacking\" is a type of CSRF attack in which a <script> tag on an attacker's site exploits a page on the victim's site that returns private information such as JSON or JavaScript. Possible solutions include:\n\nrequiring an authentication token in the POST and GET parameters for any response that returns private information.\nMisplaced trust in the client\nDevelopers of client-server applications must recognize that untrusted clients may be under the control of attackers. The application author cannot assume that their JavaScript code will run as intended (or at all) because any secret embedded in the code could be extracted by a determined adversary. Some implications are:\n\nWebsite authors cannot perfectly conceal how their JavaScript operates because the raw source code must be sent to the client. The code can be obfuscated, but obfuscation can be reverse-engineered.\nJavaScript form validation only provides convenience for users, not security. If a site verifies that the user agreed to its terms of service, or filters invalid characters out of fields that should only contain numbers, it must do so on the server, not only the client.\nScripts can be selectively disabled, so JavaScript cannot be relied on to prevent operations such as right-clicking on an image to save it.[87]\nIt is considered very bad practice to embed sensitive information such as passwords in JavaScript because it can be extracted by an attacker.[88]\nPrototype pollution is a runtime vulnerability in which attackers can overwrite arbitrary properties in an object's prototype.\nMisplaced trust in developers\nPackage management systems such as npm and Bower are popular with JavaScript developers. Such systems allow a developer to easily manage their program's dependencies upon other developers' program libraries. Developers trust that the maintainers of the libraries will keep them secure and up to date, but that is not always the case. A vulnerability has emerged because of this blind trust. Relied-upon libraries can have new releases that cause bugs or vulnerabilities to appear in all programs that rely upon the libraries. Inversely, a library can go unpatched with known vulnerabilities out in the wild. In a study done looking over a sample of 133,000 websites, researchers found 37% of the websites included a library with at least one known vulnerability.[89] \"The median lag between the oldest library version used on each website and the newest available version of that library is 1,177 days in ALEXA, and development of some libraries still in active use ceased years ago.\"[89] Another possibility is that the maintainer of a library may remove the library entirely. This occurred in March 2016 when Azer Koçulu removed his repository from npm. This caused tens of thousands of programs and websites depending upon his libraries to break.[90][91]\n\nBrowser and plugin coding errors\nFurther information: Buffer overflow\nJavaScript provides an interface to a wide range of browser capabilities, some of which may have flaws such as buffer overflows. These flaws can allow attackers to write scripts that would run any code they wish on the user's system. This code is not by any means limited to another JavaScript application. For example, a buffer overrun exploit can allow an attacker to gain access to the operating system's API with superuser privileges.\nThese flaws have affected major browsers including Firefox,[92] Internet Explorer,[93] and Safari.[94]\nPlugins, such as video players, Adobe Flash, and the wide range of ActiveX controls enabled by default in Microsoft Internet Explorer, may also have flaws exploitable via JavaScript (such flaws have been exploited in the past).[95][96]\nIn Windows Vista, Microsoft has attempted to contain the risks of bugs such as buffer overflows by running the Internet Explorer process with limited privileges.[97] Google Chrome similarly confines its page renderers to their own \"sandbox\".\n\nSandbox implementation errors\nWeb browsers are capable of running JavaScript outside the sandbox, with the privileges necessary to, for example, create or delete files. Such privileges are not intended to be granted to code from the Web.\nIncorrectly granting privileges to JavaScript from the Web has played a role in vulnerabilities in both Internet Explorer[98] and Firefox.[99] In Windows XP Service Pack 2, Microsoft demoted JScript's privileges in Internet Explorer.[100]\nMicrosoft Windows allows JavaScript source files on a computer's hard drive to be launched as general-purpose, non-sandboxed programs (see: Windows Script Host). This makes JavaScript (like VBScript) a theoretically viable vector for a Trojan horse, although JavaScript Trojan horses are uncommon in practice.[101][failed verification]\n\nHardware vulnerabilities\nIn 2015, a JavaScript-based proof-of-concept implementation of a rowhammer attack was described in a paper by security researchers.[102][103][104][105]\nIn 2017, a JavaScript-based attack via browser was demonstrated that could bypass ASLR. It is called \"ASLR⊕Cache\" or AnC.[106][107]\nIn 2018, the paper that announced the Spectre attacks against Speculative Execution in Intel and other processors included a JavaScript implementation.[108]\n\nDevelopment tools\nImportant tools have evolved with the language.\n\nEvery major web browser has built-in web development tools, including a JavaScript debugger.\nStatic program analysis tools, such as ESLint and JSLint, scan JavaScript code for conformance to a set of standards and guidelines.\nSome browsers have built-in profilers. Stand-alone profiling libraries have also been created, such as benchmark.js and jsbench.[109][110]\nMany text editors have syntax highlighting support for JavaScript code.\nRelated technologies\nJava\nA common misconception is that JavaScript is directly related to Java. Both indeed have a C-like syntax (the C language being their most immediate common ancestor language). They are also typically sandboxed, and JavaScript was designed with Java's syntax and standard library in mind. In particular, all Java keywords were reserved in original JavaScript, JavaScript's standard library follows Java's naming conventions, and JavaScript's Math and Date objects are based on classes from Java 1.0.[111]\nBoth languages first appeared in 1995, but Java was developed by James Gosling of Sun Microsystems and JavaScript by Brendan Eich of Netscape Communications.\nThe differences between the two languages are more prominent than their similarities. Java has static typing, while JavaScript's typing is dynamic. Java is loaded from compiled bytecode, while JavaScript is loaded as human-readable source code. Java's objects are class-based, while JavaScript's are prototype-based. Finally, Java did not support functional programming until Java 8, while JavaScript has done so from the beginning, being influenced by Scheme.\n\nJSON\nJSON is a data format derived from JavaScript; hence the name JavaScript Object Notation. It is a widely-used format supported by many other programming languages.\n\nTranspilers\nMany websites are JavaScript-heavy, so transpilers have been created to convert code written in other languages, which can aid the development process.[35]\nTypeScript and CoffeeScript are two notable languages that transpile to JavaScript.\n\nWebAssembly\nWebAssembly is a newer language with a bytecode format designed to complement JavaScript, especially the performance-critical portions of web page scripts. All of the major JavaScript engines support WebAssembly,[112] which runs in the same sandbox as regular JavaScript code.\nasm.js is a subset of JavaScript that served as the forerunner of WebAssembly.[113]\n\nReferences\n.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}\n\n^ a b .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:\"\\\"\"\"\\\"\"\"'\"\"'\"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free.id-lock-free a{background:url(\"//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg\")right 0.1em center/9px no-repeat}body:not(.skin-timeless):not(.skin-minerva) .mw-parser-output .id-lock-free a{background-size:contain}.mw-parser-output .id-lock-limited.id-lock-limited a,.mw-parser-output .id-lock-registration.id-lock-registration a{background:url(\"//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg\")right 0.1em center/9px no-repeat}body:not(.skin-timeless):not(.skin-minerva) .mw-parser-output .id-lock-limited a,body:not(.skin-timeless):not(.skin-minerva) .mw-parser-output .id-lock-registration a{background-size:contain}.mw-parser-output .id-lock-subscription.id-lock-subscription a{background:url(\"//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg\")right 0.1em center/9px no-repeat}body:not(.skin-timeless):not(.skin-minerva) .mw-parser-output .id-lock-subscription a{background-size:contain}.mw-parser-output .cs1-ws-icon a{background:url(\"//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg\")right 0.1em center/12px no-repeat}body:not(.skin-timeless):not(.skin-minerva) .mw-parser-output .cs1-ws-icon a{background-size:contain}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#2C882D;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}html.skin-theme-clientpref-night .mw-parser-output .cs1-maint{color:#18911F}html.skin-theme-clientpref-night .mw-parser-output .cs1-visible-error,html.skin-theme-clientpref-night .mw-parser-output .cs1-hidden-error{color:#f8a397}@media(prefers-color-scheme:dark){html.skin-theme-clientpref-os .mw-parser-output .cs1-visible-error,html.skin-theme-clientpref-os .mw-parser-output .cs1-hidden-error{color:#f8a397}html.skin-theme-clientpref-os .mw-parser-output .cs1-maint{color:#18911F}}\"Netscape and Sun announce JavaScript, the Open, Cross-platform Object Scripting Language for Enterprise Networks and the Internet\" (Press release). 4 December 1995. Archived from the original on 16 September 2007.\n\n^ \"ECMAScript® 2023 Language Specification\". June 2023. Retrieved 2 March 2024.\n\n^ \"ECMAScript® 2025 Language Specification\". 27 March 2024. Retrieved 17 April 2024.\n\n^ \"nodejs/node-eps\". GitHub. Archived from the original on 29 August 2020. Retrieved 5 July 2018.\n\n^ a b Seibel, Peter (16 September 2009). Coders at Work: Reflections on the Craft of Programming. Apress. ISBN 9781430219484. Archived from the original on 24 December 2020. Retrieved 25 December 2018. Eich: The immediate concern at Netscape was it must look like Java.\n\n^ a b c d e \"Chapter 4. How JavaScript Was Created\". speakingjs.com. Archived from the original on 27 February 2020. Retrieved 21 November 2017.\n\n^ \"Popularity – Brendan Eich\".\n\n^ \"Brendan Eich: An Introduction to JavaScript, JSConf 2010\". YouTube. 20 January 2013. p. 22m. Archived from the original on 29 August 2020. Retrieved 25 November 2019. Eich: \"function\", eight letters, I was influenced by AWK.\n\n^ Eich, Brendan (1998). \"Foreword\". In Goodman, Danny (ed.). JavaScript Bible (3rd ed.). John Wiley & Sons. ISBN 0-7645-3188-3. LCCN 97078208. OCLC 38888873. OL 712205M.\n\n^ a b \"Usage Statistics of JavaScript as Client-side Programming Language on Websites\". W3Techs. Retrieved 27 February 2024.\n\n^ \"ECMAScript 2020 Language Specification\". Archived from the original on 8 May 2020. Retrieved 8 May 2020.\n\n^ \"Bloomberg Game Changers: Marc Andreessen\". Bloomberg. Bloomberg. 17 March 2011. Archived from the original on 16 May 2012. Retrieved 7 December 2011.\n\n^ Enzer, Larry (31 August 2018). \"The Evolution of the Web Browsers\". Monmouth Web Developers. Archived from the original on 31 August 2018. Retrieved 31 August 2018.\n\n^ a b c Fin JS (17 June 2016), \"Brendan Eich – CEO of Brave\", YouTube, retrieved 7 February 2018\n\n^ \"Netscape Communications Corp.\", Browser enhancements. Encyclopædia Britannica 2006 Ultimate Reference Suite DVD\n\n^ \"TechVision: Innovators of the Net: Brendan Eich and JavaScript\". Archived from the original on 8 February 2008.\n\n^ a b \"Chapter 5. Standardization: ECMAScript\". speakingjs.com. Archived from the original on 1 November 2021. Retrieved 1 November 2021.\n\n^ a b Champeon, Steve (6 April 2001). \"JavaScript, How Did We Get Here?\". oreilly.com. Archived from the original on 19 July 2016. Retrieved 16 July 2016.\n\n^ \"Microsoft Internet Explorer 3.0 Beta Now Available\". microsoft.com. Microsoft. 29 May 1996. Archived from the original on 24 November 2020. Retrieved 16 July 2016.\n\n^ McCracken, Harry (16 September 2010). \"The Unwelcome Return of \"Best Viewed with Internet Explorer\"\". technologizer.com. Archived from the original on 23 June 2018. Retrieved 16 July 2016.\n\n^ Baker, Loren (24 November 2004). \"Mozilla Firefox Internet Browser Market Share Gains to 7.4%\". Search Engine Journal. Archived from the original on 7 May 2021. Retrieved 8 May 2021.\n\n^ Weber, Tim (9 May 2005). \"The assault on software giant Microsoft\". BBC News. Archived from the original on 25 September 2017.\n\n^ \"Big browser comparison test: Internet Explorer vs. Firefox, Opera, Safari and Chrome\". PC Games Hardware. Computec Media AG. 3 July 2009. Archived from the original on 2 May 2012. Retrieved 28 June 2010.\n\n^ Purdy, Kevin (11 June 2009). \"Lifehacker Speed Tests: Safari 4, Chrome 2\". Lifehacker. Archived from the original on 14 April 2021. Retrieved 8 May 2021.\n\n^ \"TraceMonkey: JavaScript Lightspeed, Brendan Eich's Blog\". Archived from the original on 4 December 2015. Retrieved 22 July 2020.\n\n^ \"Mozilla asks, 'Are we fast yet?'\". Wired. Archived from the original on 22 June 2018. Retrieved 18 January 2019.\n\n^ \"ECMAScript 6: New Features: Overview and Comparison\". es6-features.org. Archived from the original on 18 March 2018. Retrieved 19 March 2018.\n\n^ Professional Node.js: Building JavaScript Based Scalable Software Archived 2017-03-24 at the Wayback Machine, John Wiley & Sons, 01-Oct-2012\n\n^ Sams Teach Yourself Node.js in 24 Hours Archived 2017-03-23 at the Wayback Machine, Sams Publishing, 05-Sep-2012\n\n^ Lawton, George (19 July 2018). \"The secret history behind the success of npm and Node\". TheServerSide. Archived from the original on 2 August 2021. Retrieved 2 August 2021.\n\n^ Brown, Paul (13 January 2017). \"State of the Union: npm\". Linux.com. Archived from the original on 2 August 2021. Retrieved 2 August 2021.\n\n^ a b c Branscombe, Mary (4 May 2016). \"JavaScript Standard Moves to Yearly Release Schedule; Here is What's New for ES16\". The New Stack. Archived from the original on 16 January 2021. Retrieved 15 January 2021.\n\n^ \"The TC39 Process\". tc39.es. Ecma International. Archived from the original on 7 February 2021. Retrieved 15 January 2021.\n\n^ \"ECMAScript proposals\". TC39. Archived from the original on 4 December 2020. Retrieved 15 January 2021.\n\n^ a b Ashkenas, Jeremy. \"List of languages that compile to JS\". GitHub. Archived from the original on 31 January 2020. Retrieved 6 February 2020.\n\n^ \"U.S. Trademark Serial No. 75026640\". uspto.gov. United States Patent and Trademark Office. 6 May 1997. Archived from the original on 13 July 2021. Retrieved 8 May 2021.\n\n^ \"Legal Notices\". oracle.com. Oracle Corporation. Archived from the original on 5 June 2021. Retrieved 8 May 2021.\n\n^ \"Oracle to buy Sun in $7.4-bn deal\". The Economic Times. 21 April 2009.\n\n^ a b c \"Usage statistics of JavaScript libraries for websites\". W3Techs. Retrieved 9 April 2021.\n\n^ \"Using jQuery with Bootstrap\". clouddevs.com. 10 June 2019. Retrieved 17 March 2024.\n\n^ \"Vanilla JS\". vanilla-js.com. 16 June 2020. Archived from the original on 16 June 2020. Retrieved 17 June 2020.\n\n^ \"Server-Side JavaScript Guide\". oracle.com. Oracle Corporation. 11 December 1998. Archived from the original on 11 March 2021. Retrieved 8 May 2021.\n\n^ Clinick, Andrew (14 July 2000). \"Introducing JScript .NET\". Microsoft Developer Network. Microsoft. Archived from the original on 10 November 2017. Retrieved 10 April 2018. [S]ince the 1996 introduction of JScript version 1.0 ... we've been seeing a steady increase in the usage of JScript on the server—particularly in Active Server Pages (ASP)\n\n^ a b Mahemoff, Michael (17 December 2009). \"Server-Side JavaScript, Back with a Vengeance\". readwrite.com. Archived from the original on 17 June 2016. Retrieved 16 July 2016.\n\n^ \"JavaScript for Acrobat\". adobe.com. 7 August 2009. Archived from the original on 7 August 2009. Retrieved 18 August 2009.\n\n^ treitter (2 February 2013). \"Answering the question: \"How do I develop an app for GNOME?\"\". livejournal.com. Archived from the original on 11 February 2013. Retrieved 7 February 2013.\n\n^ \"Tessel 2... Leverage all the libraries of Node.JS to create useful devices in minutes with Tessel\". tessel.io. Archived from the original on 26 May 2021. Retrieved 8 May 2021.\n\n^ \"Node.js Raspberry Pi GPIO Introduction\". w3schools.com. Archived from the original on 13 August 2021. Retrieved 3 May 2020.\n\n^ \"Espruino – JavaScript for Microcontrollers\". espruino.com. Archived from the original on 1 May 2020. Retrieved 3 May 2020.\n\n^ Looper, Jen (21 September 2015). \"A Guide to JavaScript Engines for Idiots\". Telerik Developer Network. Archived from the original on 8 December 2018. Retrieved 8 December 2018.\n\n^ \"How Blink Works\". Google. Retrieved 12 March 2024.\n\n^ a b \"Documentation · V8\". Google. Retrieved 3 March 2024.\n\n^ Nelaturu, Keerthi. \"WebAssembly: What's the big deal?\". medium.com. Retrieved 3 March 2024.\n\n^ \"Concurrency model and Event Loop\". Mozilla Developer Network. Archived from the original on 5 September 2015. Retrieved 28 August 2015.\n\n^ Flanagan, David (17 August 2006). JavaScript: The Definitive Guide: The Definitive Guide. \"O'Reilly Media, Inc.\". p. 16. ISBN 978-0-596-55447-7. Archived from the original on 1 August 2020. Retrieved 29 March 2019.\n\n^ a b c d Korolev, Mikhail (1 March 2019). \"JavaScript quirks in one image from the Internet\". The DEV Community. Archived from the original on 28 October 2019. Retrieved 28 October 2019.\n\n^ Bernhardt, Gary (2012). \"Wat\". Destroy All Software. Archived from the original on 28 October 2019. Retrieved 28 October 2019.\n\n^ \"JavaScript data types and data structures\". MDN. 16 February 2017. Archived from the original on 14 March 2017. Retrieved 24 February 2017.\n\n^ Flanagan 2006, pp. 176–178.\n\n^ Crockford, Douglas. \"Prototypal Inheritance in JavaScript\". Archived from the original on 13 August 2013. Retrieved 20 August 2013.\n\n^ \"Inheritance and the prototype chain\". Mozilla Developer Network. Archived from the original on 25 April 2013. Retrieved 6 April 2013.\n\n^ Herman, David (2013). Effective JavaScript. Addison-Wesley. p. 83. ISBN 978-0-321-81218-6.\n\n^ Haverbeke, Marijn (2011). Eloquent JavaScript. No Starch Press. pp. 95–97. ISBN 978-1-59327-282-1.\n\n^ Katz, Yehuda (12 August 2011). \"Understanding \"Prototypes\" in JavaScript\". Archived from the original on 5 April 2013. Retrieved 6 April 2013.\n\n^ Herman, David (2013). Effective JavaScript. Addison-Wesley. pp. 125–127. ISBN 978-0-321-81218-6.\n\n^ \"Function – JavaScript\". MDN Web Docs. Retrieved 30 October 2021.\n\n^ \"Properties of the Function Object\". Es5.github.com. Archived from the original on 28 January 2013. Retrieved 26 May 2013.\n\n^ Flanagan 2006, p. 141.\n\n^ The many talents of JavaScript for generalizing Role-Oriented Programming approaches like Traits and Mixins Archived 2017-10-05 at the Wayback Machine, Peterseliger.blogpsot.de, April 11, 2014.\n\n^ Traits for JavaScript Archived 2014-07-24 at the Wayback Machine, 2010.\n\n^ \"Home | CocktailJS\". Cocktailjs.github.io. Archived from the original on 4 February 2017. Retrieved 24 February 2017.\n\n^ Croll, Angus (31 May 2011). \"A fresh look at JavaScript Mixins\". JavaScript, JavaScript…. Archived from the original on 15 April 2020.\n\n^ Haverbeke, Marijn (2011). Eloquent JavaScript. No Starch Press. pp. 139–149. ISBN 978-1-59327-282-1.\n\n^ \"E4X – Archive of obsolete content\". Mozilla Developer Network. Mozilla Foundation. 14 February 2014. Archived from the original on 24 July 2014. Retrieved 13 July 2014.\n\n^ \"var – JavaScript\". The Mozilla Developer Network. Archived from the original on 23 December 2012. Retrieved 22 December 2012.\n\n^ \"let\". MDN web docs. Mozilla. Archived from the original on 28 May 2019. Retrieved 27 June 2018.\n\n^ \"const\". MDN web docs. Mozilla. Archived from the original on 28 June 2018. Retrieved 27 June 2018.\n\n^ \"ECMAScript Language Specification – ECMA-262 Edition 5.1\". Ecma International. Archived from the original on 26 November 2012. Retrieved 22 December 2012.\n\n^ \"console\". Mozilla Developer Network. Mozilla. Archived from the original on 28 February 2013. Retrieved 6 April 2013.\n\n^ \"arguments\". Mozilla Developer Network. Mozilla. Archived from the original on 13 April 2013. Retrieved 6 April 2013.\n\n^ \"function* - JavaScript | MDN\". developer.mozilla.org. Retrieved 27 September 2022.\n\n^ \"JavaScript modules\". MDN Web Docs. Mozilla. Archived from the original on 17 July 2022. Retrieved 28 July 2022.\n\n^ \"Making JavaScript Safe for Advertising\". ADsafe. Archived from the original on 6 July 2021. Retrieved 8 May 2021.\n\n^ \"Secure ECMA Script (SES)\". Archived from the original on 15 May 2013. Retrieved 26 May 2013.\n\n^ \"Google Caja Project\". Google. Archived from the original on 22 January 2021. Retrieved 9 July 2021.\n\n^ \"Mozilla Cross-Site Scripting Vulnerability Reported and Fixed – MozillaZine Talkback\". Mozillazine.org. Archived from the original on 21 July 2011. Retrieved 24 February 2017.\n\n^ Kottelin, Thor (17 June 2008). \"Right-click \"protection\"? Forget about it\". blog.anta.net. Archived from the original on 9 August 2011. Retrieved 28 July 2022.\n\n^ Rehorik, Jan (29 November 2016). \"Why You Should Never Put Sensitive Data in Your JavaScript\". ServiceObjects Blog. ServiceObjects. Archived from the original on 3 June 2019. Retrieved 3 June 2019.\n\n^ a b Lauinger, Tobias; Chaabane, Abdelberi; Arshad, Sajjad; Robertson, William; Wilson, Christo; Kirda, Engin (21 December 2016), \"Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web\" (PDF), Northeastern University, arXiv:1811.00918, doi:10.14722/ndss.2017.23414, ISBN 978-1-891562-46-4, S2CID 17885720, archived from the original (PDF) on 29 March 2017, retrieved 28 July 2022\n\n^ Collins, Keith (27 March 2016). \"How one programmer broke the internet by deleting a tiny piece of code\". Quartz. Archived from the original on 22 February 2017. Retrieved 22 February 2017.\n\n^ SC Magazine UK, Developer's 11 lines of deleted code 'breaks the internet' Archived February 23, 2017, at the Wayback Machine\n\n^ Mozilla Corporation, Buffer overflow in crypto.signText() Archived 2014-06-04 at the Wayback Machine\n\n^ Festa, Paul (19 August 1998). \"Buffer-overflow bug in IE\". CNET. Archived from the original on 25 December 2002.\n\n^ SecurityTracker.com, Apple Safari JavaScript Buffer Overflow Lets Remote Users Execute Arbitrary Code and HTTP Redirect Bug Lets Remote Users Access Files Archived 2010-02-18 at the Wayback Machine\n\n^ SecurityFocus, Microsoft WebViewFolderIcon ActiveX Control Buffer Overflow Vulnerability Archived 2011-10-11 at the Wayback Machine\n\n^ Fusion Authority, Macromedia Flash ActiveX Buffer Overflow Archived August 13, 2011, at the Wayback Machine\n\n^ \"Protected Mode in Vista IE7 – IEBlog\". Blogs.msdn.com. 9 February 2006. Archived from the original on 23 January 2010. Retrieved 24 February 2017.\n\n^ US CERT, Vulnerability Note VU#713878: Microsoft Internet Explorer does not properly validate source of redirected frame Archived 2009-10-30 at the Wayback Machine\n\n^ Mozilla Foundation, Mozilla Foundation Security Advisory 2005–41: Privilege escalation via DOM property overrides Archived 2014-06-04 at the Wayback Machine\n\n^ Andersen, Starr (9 August 2004). \"Part 5: Enhanced Browsing Security\". TechNet. Microsoft Docs. Changes to Functionality in Windows XP Service Pack 2. Retrieved 20 October 2021.\n\n^ For one example of a rare JavaScript Trojan Horse, see Symantec Corporation, JS.Seeker.K Archived 2011-09-13 at the Wayback Machine\n\n^ Gruss, Daniel; Maurice, Clémentine; Mangard, Stefan (24 July 2015). \"Rowhammer.js: A Remote Software-Induced Fault Attack in JavaScript\". arXiv:1507.06955 [cs.CR].\n\n^ Jean-Pharuns, Alix (30 July 2015). \"Rowhammer.js Is the Most Ingenious Hack I've Ever Seen\". Motherboard. Vice. Archived from the original on 27 January 2018. Retrieved 26 January 2018.\n\n^ Goodin, Dan (4 August 2015). \"DRAM 'Bitflipping' exploit for attacking PCs: Just add JavaScript\". Ars Technica. Archived from the original on 27 January 2018. Retrieved 26 January 2018.\n\n^ Auerbach, David (28 July 2015). \"Rowhammer security exploit: Why a new security attack is truly terrifying\". slate.com. Archived from the original on 30 July 2015. Retrieved 29 July 2015.\n\n^ AnC Archived 2017-03-16 at the Wayback Machine VUSec, 2017\n\n^ New ASLR-busting JavaScript is about to make drive-by exploits much nastier Archived 2017-03-16 at the Wayback Machine Ars Technica, 2017\n\n^ Spectre Attack Archived 2018-01-03 at the Wayback Machine Spectre Attack\n\n^ \"Benchmark.js\". benchmarkjs.com. Archived from the original on 19 December 2016. Retrieved 6 November 2016.\n\n^ JSBEN.CH. \"JSBEN.CH Performance Benchmarking Playground for JavaScript\". jsben.ch. Archived from the original on 27 February 2021. Retrieved 13 August 2021.\n\n^ Eich, Brendan (3 April 2008). \"Popularity\". Archived from the original on 3 July 2011. Retrieved 19 January 2012.\n\n^ \"Edge Browser Switches WebAssembly to 'On' -- Visual Studio Magazine\". Visual Studio Magazine. Archived from the original on 10 February 2018. Retrieved 9 February 2018.\n\n^ \"frequently asked questions\". asm.js. Archived from the original on 4 June 2014. Retrieved 13 April 2014.\n\n\nSources\nDere, Mohan (21 December 2017). \"How to integrate create-react-app with all the libraries you need to make a great app\". freeCodeCamp. Retrieved 14 June 2018.\nPanchal, Krunal (26 April 2022). \"Angular vs React Detailed Comparison\". Groovy Web. Retrieved 5 June 2023.\nFurther reading\nSee also: ECMAScript Specification Documents\nFlanagan, David. JavaScript: The Definitive Guide. 7th edition. Sebastopol, California: O'Reilly, 2020. ISBN 978-1-491-95202-3.\nHaverbeke, Marijn. Eloquent JavaScript. 3rd edition. No Starch Press, 2018. 472 pages. ISBN 978-1593279509.(download)\nZakas, Nicholas. Principles of Object-Oriented JavaScript, 1st edition. No Starch Press, 2014. 120 pages. ISBN 978-1593275402.\nExternal links\n.mw-parser-output .side-box{margin:4px 0;box-sizing:border-box;border:1px solid #aaa;font-size:88%;line-height:1.25em;background-color:var(--background-color-interactive-subtle,#f8f9fa);display:flow-root}.mw-parser-output .side-box-abovebelow,.mw-parser-output .side-box-text{padding:0.25em 0.9em}.mw-parser-output .side-box-image{padding:2px 0 2px 0.9em;text-align:center}.mw-parser-output .side-box-imageright{padding:2px 0.9em 2px 0;text-align:center}@media(min-width:500px){.mw-parser-output .side-box-flex{display:flex;align-items:center}.mw-parser-output .side-box-text{flex:1;min-width:0}}@media(min-width:720px){.mw-parser-output .side-box{width:238px}.mw-parser-output .side-box-right{clear:right;float:right;margin-left:1em}.mw-parser-output .side-box-left{margin-right:1em}}.mw-parser-output .sister-box .side-box-abovebelow{padding:0.75em 0;text-align:center}.mw-parser-output .sister-box .side-box-abovebelow>b{display:block}.mw-parser-output .sister-box .side-box-text>ul{border-top:1px solid #aaa;padding:0.75em 0;width:217px;margin:0 auto}.mw-parser-output .sister-box .side-box-text>ul>li{min-height:31px}.mw-parser-output .sister-logo{display:inline-block;width:31px;line-height:31px;vertical-align:middle;text-align:center}.mw-parser-output .sister-link{display:inline-block;margin-left:4px;width:182px;vertical-align:middle}@media print{body.ns-0 .mw-parser-output .sistersitebox{display:none!important}}.mw-parser-output .plainlist ol,.mw-parser-output .plainlist ul{line-height:inherit;list-style:none;margin:0;padding:0}.mw-parser-output .plainlist ol li,.mw-parser-output .plainlist ul li{margin-bottom:0}\n\nJavaScript  at Wikipedia's sister projects\n\nDefinitions from WiktionaryMedia from CommonsTextbooks from WikibooksResources from WikiversityDocumentation from MediaWiki\n\n.mw-parser-output .spoken-wikipedia{border:1px solid #a2a9b1;background-color:var(--background-color-interactive-subtle,#f8f9fa);margin:0.5em 0;padding:0.2em;line-height:1.5em;font-size:90%}.mw-parser-output .spoken-wikipedia-header{text-align:center}.mw-parser-output .spoken-wikipedia-listen-to{font-weight:bold}.mw-parser-output .spoken-wikipedia-files{text-align:center;margin-top:10px;margin-bottom:0.4em}.mw-parser-output .spoken-wikipedia-icon{float:left;margin-left:5px;margin-top:10px}.mw-parser-output .spoken-wikipedia-disclaimer{margin-left:60px;margin-top:10px;font-size:95%;line-height:1.4em}.mw-parser-output .spoken-wikipedia-footer{margin-top:10px;text-align:center}@media(min-width:720px){.mw-parser-output .spoken-wikipedia{width:20em;float:right;clear:right;margin-left:1em}}Listen to this article (48 minutes)\nThis audio file was created from a revision of this article dated 20 August 2013 (2013-08-20), and does not reflect subsequent edits.(Audio help · More spoken articles)\nThe Modern JavaScript Tutorial. A community maintained continuously updated collection of tutorials on the entirety of the language.\nJavaScript at Curlie\n\"JavaScript: The First 20 Years\". Retrieved 6 February 2022.\n.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}body.skin--responsive .mw-parser-output .navbox-image img{max-width:none!important}@media print{body.ns-0 .mw-parser-output .navbox{display:none!important}}.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:\"[ \"}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:\" ]\"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}html.skin-theme-clientpref-night .mw-parser-output .navbar li a abbr{color:var(--color-base)!important}@media(prefers-color-scheme:dark){html.skin-theme-clientpref-os .mw-parser-output .navbar li a abbr{color:var(--color-base)!important}}@media print{.mw-parser-output .navbar{display:none!important}}vteJavaScriptCode analysis\nESLint\nJSHint\nJSLint\nSupersets\nJS++\nTypeScript\nArkTS\nTranspilers\nAtScript\nBabel\nClojureScript\nCoffeeScript\nDart\nElm\nEmscripten\nGoogle Closure Compiler\nGoogle Web Toolkit\nHaxe\nLiveScript\nMorfik\nNim\nOpa\nPureScript\nReason\nWebSharper\nConcepts\nJavaScript library\nJavaScript syntax\nDebuggers\nChrome DevTools\nFirefox Inspector\nKomodo IDE\nMicrosoft Edge DevTools\nOpera DevTools\nSafari Web Inspector\nDoc generators\nJSDoc\nEditors (comparison)\nAce\nCloud9 IDE\nAtom\nCodeMirror\nBrackets\nLight Table\nPhpStorm\nOrion\nVisual Studio\nVisual Studio Express\nVisual Studio Code\nVisual Studio Team Services\nVim\nEngines\nList of ECMAScript engines\nFrameworks\nComparison of JavaScript frameworks\nList of JavaScript libraries\nRelated technologies\nAjax\nAssemblyScript\nasm.js\nCascading Style Sheets\nDocument Object Model\nHTML\nHTML5\nJSON\nWebAssembly\nWebAuthn\nPackage managers\nnpm\nyarn\nModule bundlers\nWebpack\nVite\nesbuild\nServer-side\nActive Server Pages\nBun\nCommonJS\nDeno\nJSGI\nNode.js\nWakanda\nUnit testing frameworks (list)\nJasmine\nJest\nMocha\nQUnit\nPeople\nDouglas Crockford\nRyan Dahl\nBrendan Eich\nJohn Resig\n\nvteProgramming languages\nComparison\nTimeline\nHistory\n\nAda\nALGOL\nSimula\nAPL\nAssembly\nBASIC\nVisual Basic\nclassic\n.NET\nC\nC++\nC#\nCOBOL\nErlang\nForth\nFortran\nGo\nHaskell\nJava\nJavaScript\nJulia\nKotlin\nLisp\nLua\nMATLAB\nML\nPascal\nObject Pascal\nPerl\nPHP\nProlog\nPython\nR\nRuby\nRust\nSQL\nScratch\nShell\nSmalltalk\nSwift\nmore...\n\n Lists: Alphabetical\nCategorical\nGenerational\nNon-English-based\n Category\n\nvteECMAScriptDialects\nActionScript\nCaja\nJavaScript\nengines\nasm.js\nJScript\nJScript .NET\nQtScript\nTypeScript\nWMLScript\nEngines(comparison)\nCarakan\nFuthark\nInScript\nJavaScriptCore\nJScript\nKJS\nLinear B\nQtScript\nRhino\nSpiderMonkey\nTraceMonkey\nJägerMonkey\nTamarin\nV8\nChakraCore\nChakra\nJScript .NET\nNashorn\nFrameworksClient-side\nDojo\nEcho\nExt JS\nGoogle Web Toolkit\njQuery\nLively Kernel\nmidori\nMochiKit\nMooTools\nPrototype\nPyjs\nqooxdoo\n\nSproutCore\nSpry\nWakanda Framework\nServer-side\nNode.js\nDeno\nBun\nJaxer\nAppJet\nWakandaDB\nMultiple\nCappuccino\nLibraries\nBackbone.js\nSWFObject\nUnderscore.js\nPeople\nBrendan Eich\nDouglas Crockford\nJohn Resig\nScott Isaacs\nOther\nDHTML\nEcma International\nJSDoc\nJSGI\nJSHint\nJSLint\nJSON\nJSSS\nSputnik\nSunSpider\nAsynchronous module definition\nCommonJS\n\n Lists\nJavaScript libraries\nAjax frameworks\n Comparisons\nJavaScript frameworks\nserver-side JavaScript\n\nvteWeb browsers\nFeatures\nstandards\nprotocols\nFeatures\nBookmarks\nExtensions\nPrivacy mode\nWeb standards\nHTML\nv5\nCSS\nDOM\nJavaScript\nWebAssembly\nWeb storage\nIndexedDB\nWebGL\nWebGPU\nProtocols\nHTTP\nEncryption\nCookies\nthird-party\nOCSP\nWebRTC\nWebSocket\nActiveBlink-based\nGoogle Chrome\nChromium\nArc\nAvast\nBrave\nCoc Coc\nComodo\nDooble\nEpic\nFalkon\nMaxthon\nMicrosoft Edge\nOpera (Mobile)\nOtter\nPuffin \nSamsung Internet\nSilk\nSleipnir\nSRWare\nSupermium\nUC\nungoogled\nVivaldi\nWhale\nYandex\nGecko-based\nFirefox\nFloorp\nGNU IceCat\nLibreWolf\nMidori\nSlimBrowser\nTor Browser\nGecko forks\nBasilisk\nK-Meleon\nPale Moon\nSeaMonkey\nWaterfox\nWebKit-based\nSafari\nGNOME Web\niCab\nKonqueror\nOther\n360\nDuckDuckGo\neww\nFlow\nLinks\nLunascape\nLynx\nNetFront\nNetSurf\nOpera Mini\nQQ\nqutebrowser\nw3m\nDiscontinuedBlink-based\nBeaker\nCitrio\nFlock\nRedcore\nRockmelt\nSalamWeb\nSputnik\nTorch\nGecko-based\nBeonex\nCamino\nClassilla\nConkeror\nFirefox Lite\nGaleon\nGhostzilla\nIceDragon\nKazehakase\nKylo\nLotus\nMicroB\nMinimo\nMozilla suite\nPirateBrowser\nPogo\nStrata\nSwiftfox\nSwiftweasel\nTenFourFox\nTimberwolf\nxB\nMSHTML-based\nInternet Explorer\nAOL\nDeepnet\nGreenBrowser\nMediaBrowser\nNeoPlanet\nNetCaptor\nSpaceTime\nZAC\nWebKit-based\nArora\nBOLT\nDolphin\nFluid\nGoogle TV\nIris\nMercury\nNokia Symbian\nOmniWeb\nOpera Coast\nOrigyn\nQtWeb\nShiira\nSteel\nsurf\nUzbl\nWebPositive\nxombrero\nOther\nabaco\nAmaya\nArachne\nArena\nBlazer\nCake\nCharon\nCM\nDeepfish\nDillo\nEdge Legacy\nELinks\nGazelle\nHotJava\nIBM Home Page Reader\nIBM WebExplorer\nIBrowse\nInternet Explorer for Mac\nKidZui\nLine Mode\nMosaic\nMSN TV\nNetPositive\nNetscape\nSkweezer\nSkyfire\nThunderHawk\nVision\nWinWAP\nWorldWideWeb\n\nCategory\nComparisons\nList\n\nvteNode.jsPlatform\nNode.js\nnpm\nV8\nCommonJS\nFrameworks\nMEAN\nMongoDB\nExpress.js\nAngularJS/Angular\nMEEN (substituted with Ember.js)\nBackbone.js\nMeteor\nSails.js (uses Express.js)\nNext.js\nLibraries\nLodash\nUnderscore.js\nReact.js\nVue.js\nLanguages\nJavaScript\nCoffeeScript\nTypeScript\n\n.mw-parser-output .portal-bar{font-size:88%;font-weight:bold;display:flex;justify-content:center;align-items:baseline}.mw-parser-output .portal-bar-bordered{padding:0 2em;background-color:#fdfdfd;border:1px solid #a2a9b1;clear:both;margin:1em auto 0}.mw-parser-output .portal-bar-related{font-size:100%;justify-content:flex-start}.mw-parser-output .portal-bar-unbordered{padding:0 1.7em;margin-left:0}.mw-parser-output .portal-bar-header{margin:0 1em 0 0.5em;flex:0 0 auto;min-height:24px}.mw-parser-output .portal-bar-content{display:flex;flex-flow:row wrap;flex:0 1 auto;padding:0.15em 0;column-gap:1em;align-items:baseline;margin:0;list-style:none}.mw-parser-output .portal-bar-content-related{margin:0;list-style:none}.mw-parser-output .portal-bar-item{display:inline-block;margin:0.15em 0.2em;min-height:24px;line-height:24px}@media screen and (max-width:768px){.mw-parser-output .portal-bar{font-size:88%;font-weight:bold;display:flex;flex-flow:column wrap;align-items:baseline}.mw-parser-output .portal-bar-header{text-align:center;flex:0;padding-left:0.5em;margin:0 auto}.mw-parser-output .portal-bar-related{font-size:100%;align-items:flex-start}.mw-parser-output .portal-bar-content{display:flex;flex-flow:row wrap;align-items:center;flex:0;column-gap:1em;border-top:1px solid #a2a9b1;margin:0 auto;list-style:none}.mw-parser-output .portal-bar-content-related{border-top:none;margin:0;list-style:none}}.mw-parser-output .navbox+link+.portal-bar,.mw-parser-output .navbox+style+.portal-bar,.mw-parser-output .navbox+link+.portal-bar-bordered,.mw-parser-output .navbox+style+.portal-bar-bordered,.mw-parser-output .sister-bar+link+.portal-bar,.mw-parser-output .sister-bar+style+.portal-bar,.mw-parser-output .portal-bar+.navbox-styles+.navbox,.mw-parser-output .portal-bar+.navbox-styles+.sister-bar{margin-top:-1px}Portal: Computer programming\n.mw-parser-output .tooltip-dotted{border-bottom:1px dotted;cursor:help}Authority control databases International\nFAST\nNational\nSpain\nFrance\nBnF data\nGermany\nIsrael\nUnited States\nCzech Republic\nOther\nIdRef\n<img src=\"https://login.wikimedia.org/wiki/Special:CentralAutoLogin/start?type=1x1\" alt=\"\" width=\"1\" height=\"1\" style=\"border: none; position: absolute;\">\nRetrieved from \"https://en.wikipedia.org/w/index.php?title=JavaScript&oldid=1234285176\""
}